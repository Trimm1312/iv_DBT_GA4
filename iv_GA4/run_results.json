{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.4", "generated_at": "2024-01-05T16:54:45.751336Z", "invocation_id": "0524ae04-bbef-4fec-af4b-7e1c6b9e5087", "env": {}}, "results": [{"status": "error", "timing": [{"name": "compile", "started_at": "2024-01-05T16:54:45.129614Z", "completed_at": "2024-01-05T16:54:45.208193Z"}, {"name": "execute", "started_at": "2024-01-05T16:54:45.209621Z", "completed_at": "2024-01-05T16:54:45.686126Z"}], "thread_id": "Thread-8", "execution_time": 0.5615603923797607, "adapter_response": {}, "message": "Runtime Error in model base_ga4__events (models/staging/base/base_ga4__events.sql)\n  404 Not found: Dataset set-ga-reporting:dbt_mtrimmer was not found in location europe-west2\n  \n  Location: europe-west2\n  Job ID: 41f4c989-0eba-45d9-a41f-586f683a2162\n  ", "failures": null, "unique_id": "model.ga4.base_ga4__events", "compiled": true, "compiled_code": "\n\n    \n\n    \n\n    \n\n\n\n\nwith source as (\n    select \n        \n    parse_date('%Y%m%d',event_date) as event_date_dt\n    , event_timestamp\n    , event_name\n    , event_params\n    , event_previous_timestamp\n    , event_value_in_usd\n    , event_bundle_sequence_id\n    , event_server_timestamp_offset\n    , user_id\n    , user_pseudo_id\n    , privacy_info\n    , user_properties\n    , user_first_touch_timestamp\n    , user_ltv\n    , device\n    , geo\n    , app_info\n    , traffic_source\n    , stream_id\n    , platform\n    , ecommerce.total_item_quantity\n    , ecommerce.purchase_revenue_in_usd\n    , ecommerce.purchase_revenue\n    , ecommerce.refund_value_in_usd\n    , ecommerce.refund_value\n    , ecommerce.shipping_value_in_usd\n    , ecommerce.shipping_value\n    , ecommerce.tax_value_in_usd\n    , ecommerce.tax_value\n    , ecommerce.unique_items\n    , ecommerce.transaction_id\n    , items\n\n        from `set-ga-reporting`.`analytics_270752382`.`events_*`\n        where cast( replace(_table_suffix, 'intraday_', '') as int64) >= 20231201\n    \n),\nrenamed as (\n    select \n        \n    event_date_dt\n    , event_timestamp\n    , lower(replace(trim(event_name), \" \", \"_\")) as event_name -- Clean up all event names to be snake cased\n    , event_params\n    , event_previous_timestamp\n    , event_value_in_usd\n    , event_bundle_sequence_id\n    , event_server_timestamp_offset\n    , user_id\n    , user_pseudo_id\n    , privacy_info.analytics_storage as privacy_info_analytics_storage\n    , privacy_info.ads_storage as privacy_info_ads_storage\n    , privacy_info.uses_transient_token as privacy_info_uses_transient_token\n    , user_properties\n    , user_first_touch_timestamp\n    , user_ltv.revenue as user_ltv_revenue\n    , user_ltv.currency as user_ltv_currency\n    , device.category as device_category\n    , device.mobile_brand_name as device_mobile_brand_name\n    , device.mobile_model_name as device_mobile_model_name\n    , device.mobile_marketing_name as device_mobile_marketing_name\n    , device.mobile_os_hardware_model as device_mobile_os_hardware_model\n    , device.operating_system as device_operating_system\n    , device.operating_system_version as device_operating_system_version\n    , device.vendor_id as device_vendor_id\n    , device.advertising_id as device_advertising_id\n    , device.language as device_language\n    , device.is_limited_ad_tracking as device_is_limited_ad_tracking\n    , device.time_zone_offset_seconds as device_time_zone_offset_seconds\n    , device.browser as device_browser\n    , device.browser_version as device_browser_version\n    , device.web_info.browser as device_web_info_browser\n    , device.web_info.browser_version as device_web_info_browser_version\n    , device.web_info.hostname as device_web_info_hostname\n    , geo.continent as geo_continent\n    , geo.country as geo_country\n    , geo.region as geo_region\n    , geo.city as geo_city\n    , geo.sub_continent as geo_sub_continent\n    , geo.metro as geo_metro\n    , app_info.id as app_info_id\n    , app_info.version as app_info_version\n    , app_info.install_store as app_info_install_store\n    , app_info.firebase_app_id as app_info_firebase_app_id\n    , app_info.install_source as app_info_install_source\n    , traffic_source.name as user_campaign\n    , traffic_source.medium as user_medium\n    , traffic_source.source as user_source\n    , stream_id\n    , platform\n    , struct(\n        total_item_quantity\n        , purchase_revenue_in_usd\n        , purchase_revenue\n        , refund_value_in_usd\n        , refund_value\n        , shipping_value_in_usd\n        , shipping_value\n        , tax_value_in_usd\n        , tax_value\n        , unique_items\n        , transaction_id        \n    ) as ecommerce\n    , (select \n        array_agg(struct(\n            unnested_items.item_id\n            , unnested_items.item_name\n            , unnested_items.item_brand\n            , unnested_items.item_variant\n            , unnested_items.item_category\n            , unnested_items.item_category2\n            , unnested_items.item_category3\n            , unnested_items.item_category4\n            , unnested_items.item_category5\n            , unnested_items.price_in_usd\n            , unnested_items.price\n            , unnested_items.quantity\n            , unnested_items.item_revenue_in_usd\n            , unnested_items.item_revenue\n            , unnested_items.item_refund_in_usd\n            , unnested_items.item_refund\n            , unnested_items.coupon\n            , unnested_items.affiliation\n            , unnested_items.location_id\n            , unnested_items.item_list_id\n            , unnested_items.item_list_name\n            , unnested_items.item_list_index\n            , unnested_items.promotion_id\n            , unnested_items.promotion_name\n            , unnested_items.creative_name\n            , unnested_items.creative_slot\n            , unnested_items.item_params\n        )) from unnest(items) as unnested_items \n    ) items\n    , (select \n        \n            value.int_value    \n        \n    from unnest(event_params) where key = 'ga_session_id') as \n    \n    session_id\n    \n    , (select \n        \n            value.string_value    \n        \n    from unnest(event_params) where key = 'page_location') as \n    \n    page_location\n    \n    , (select \n        \n            value.int_value    \n        \n    from unnest(event_params) where key = 'ga_session_number') as \n    \n    session_number\n    \n    , COALESCE(\n        (SELECT value.int_value FROM unnest(event_params) WHERE key = \"session_engaged\"),\n        (CASE WHEN (SELECT value.string_value FROM unnest(event_params) WHERE key = \"session_engaged\") = \"1\" THEN 1 END)\n    ) as session_engaged\n    , (select \n        \n            value.int_value    \n        \n    from unnest(event_params) where key = 'engagement_time_msec') as \n    \n    engagement_time_msec\n    \n    , (select \n        \n            value.string_value    \n        \n    from unnest(event_params) where key = 'page_title') as \n    \n    page_title\n    \n    , (select \n        \n            value.string_value    \n        \n    from unnest(event_params) where key = 'page_referrer') as \n    \n    page_referrer\n    \n    , (select \n        \n            lower(value.string_value)   \n        \n    from unnest(event_params) where key = 'source') as \n    \n    event_source\n    \n    , (select \n        \n            lower(value.string_value)   \n        \n    from unnest(event_params) where key = 'medium') as \n    \n    event_medium\n    \n    , (select \n        \n            lower(value.string_value)   \n        \n    from unnest(event_params) where key = 'campaign') as \n    \n    event_campaign\n    \n    , (select \n        \n            lower(value.string_value)   \n        \n    from unnest(event_params) where key = 'content') as \n    \n    event_content\n    \n    , (select \n        \n            lower(value.string_value)   \n        \n    from unnest(event_params) where key = 'term') as \n    \n    event_term\n    \n    , CASE \n        WHEN event_name = 'page_view' THEN 1\n        ELSE 0\n    END AS is_page_view\n    , CASE \n        WHEN event_name = 'purchase' THEN 1\n        ELSE 0\n    END AS is_purchase\n\n    from source\n)\n\nselect * from renamed\nqualify row_number() over(partition by event_date_dt, stream_id, user_pseudo_id, session_id, event_name, event_timestamp, to_json_string(ARRAY(SELECT params FROM UNNEST(event_params) AS params ORDER BY key))) = 1", "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`base_ga4__events`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-10", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__events", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__events`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-9", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.fct_ga4__sessions_daily", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`fct_ga4__sessions_daily`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-8", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__client_key_first_last_events", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__client_key_first_last_events`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-11", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_click", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_click`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-10", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_file_download", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_file_download`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-9", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_first_visit", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_first_visit`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-8", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_items", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_items`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-11", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_page_view", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_page_view`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-10", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_scroll", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_scroll`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-9", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_session_start", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_session_start`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-8", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_to_query_string_params", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_to_query_string_params`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-11", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_user_engagement", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_user_engagement`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-10", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_video_complete", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_video_complete`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-9", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_video_start", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_video_start`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-8", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__event_view_search_results", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__event_view_search_results`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-11", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__page_engaged_time", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__page_engaged_time`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-10", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__sessions_first_last_pageviews", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__sessions_first_last_pageviews`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-9", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__sessions_traffic_sources", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__sessions_traffic_sources`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-8", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__sessions_traffic_sources_daily", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__sessions_traffic_sources_daily`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-11", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__user_id_mapping", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__user_id_mapping`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-10", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.fct_ga4__sessions", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`fct_ga4__sessions`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-9", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__client_key_first_last_pageviews", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__client_key_first_last_pageviews`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-8", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.fct_ga4__pages", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`fct_ga4__pages`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-11", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.dim_ga4__sessions", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`dim_ga4__sessions`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-10", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.stg_ga4__sessions_traffic_sources_last_non_direct_daily", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`stg_ga4__sessions_traffic_sources_last_non_direct_daily`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-9", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.fct_ga4__client_keys", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`fct_ga4__client_keys`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-8", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.dim_ga4__client_keys", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`dim_ga4__client_keys`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-11", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.dim_ga4__sessions_daily", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`dim_ga4__sessions_daily`"}, {"status": "skipped", "timing": [], "thread_id": "Thread-10", "execution_time": 0.0, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.ga4.fct_ga4__user_ids", "compiled": false, "compiled_code": null, "relation_name": "`set-ga-reporting`.`dbt_mtrimmer`.`fct_ga4__user_ids`"}], "elapsed_time": 1.8293383121490479, "args": {"partial_parse": true, "log_file_max_bytes": 0, "profile": "user", "show_resource_report": false, "printer_width": 80, "defer": false, "quiet": false, "project_dir": "/usr/src/develop/user-187474/environment-278010/repository-199827", "log_format": "json", "log_format_file": "json", "strict_mode": false, "profiles_dir": "/usr/src/dbt-server-shared/.dbt", "use_colors": true, "vars": {}, "select": [], "which": "run", "enable_legacy_logger": false, "partial_parse_file_diff": true, "log_level_file": "debug", "macro_debugging": false, "favor_state": false, "populate_cache": true, "print": true, "version_check": true, "send_anonymous_usage_stats": true, "write_json": true, "cache_selected_only": false, "use_colors_file": true, "static_parser": true, "warn_error_options": {"include": [], "exclude": []}, "log_level": "info", "exclude": [], "log_path": "/usr/src/dbt-server-shared/working_dir/a3821ef3-ef39-4f64-b310-0c2e016f56a1", "invocation_command": "dbt -A dbt_worker.app worker --loglevel=DEBUG --concurrency=2 --max-memory-per-child=500000", "indirect_selection": "eager", "introspect": true}}